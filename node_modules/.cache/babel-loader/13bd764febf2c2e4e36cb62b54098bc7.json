{"ast":null,"code":"ace.define(\"ace/ext/modelist\", [\"require\", \"exports\", \"module\"], function (acequire, exports, module) {\n  \"use strict\";\n\n  var modes = [];\n\n  function getModeForPath(path) {\n    var mode = modesByName.text;\n    var fileName = path.split(/[\\/\\\\]/).pop();\n\n    for (var i = 0; i < modes.length; i++) {\n      if (modes[i].supportsFile(fileName)) {\n        mode = modes[i];\n        break;\n      }\n    }\n\n    return mode;\n  }\n\n  var Mode = function Mode(name, caption, extensions) {\n    this.name = name;\n    this.caption = caption;\n    this.mode = \"ace/mode/\" + name;\n    this.extensions = extensions;\n    var re;\n\n    if (/\\^/.test(extensions)) {\n      re = extensions.replace(/\\|(\\^)?/g, function (a, b) {\n        return \"$|\" + (b ? \"^\" : \"^.*\\\\.\");\n      }) + \"$\";\n    } else {\n      re = \"^.*\\\\.(\" + extensions + \")$\";\n    }\n\n    this.extRe = new RegExp(re, \"gi\");\n  };\n\n  Mode.prototype.supportsFile = function (filename) {\n    return filename.match(this.extRe);\n  };\n\n  var supportedModes = {\n    ABAP: [\"abap\"],\n    ABC: [\"abc\"],\n    ActionScript: [\"as\"],\n    ADA: [\"ada|adb\"],\n    Apache_Conf: [\"^htaccess|^htgroups|^htpasswd|^conf|htaccess|htgroups|htpasswd\"],\n    AsciiDoc: [\"asciidoc|adoc\"],\n    Assembly_x86: [\"asm|a\"],\n    AutoHotKey: [\"ahk\"],\n    BatchFile: [\"bat|cmd\"],\n    Bro: [\"bro\"],\n    C_Cpp: [\"cpp|c|cc|cxx|h|hh|hpp|ino\"],\n    C9Search: [\"c9search_results\"],\n    Cirru: [\"cirru|cr\"],\n    Clojure: [\"clj|cljs\"],\n    Cobol: [\"CBL|COB\"],\n    coffee: [\"coffee|cf|cson|^Cakefile\"],\n    ColdFusion: [\"cfm\"],\n    CSharp: [\"cs\"],\n    Csound_Document: [\"csd\"],\n    Csound_Orchestra: [\"orc\"],\n    Csound_Score: [\"sco\"],\n    CSS: [\"css\"],\n    Curly: [\"curly\"],\n    D: [\"d|di\"],\n    Dart: [\"dart\"],\n    Diff: [\"diff|patch\"],\n    Dockerfile: [\"^Dockerfile\"],\n    Dot: [\"dot\"],\n    Drools: [\"drl\"],\n    Dummy: [\"dummy\"],\n    DummySyntax: [\"dummy\"],\n    Eiffel: [\"e|ge\"],\n    EJS: [\"ejs\"],\n    Elixir: [\"ex|exs\"],\n    Elm: [\"elm\"],\n    Erlang: [\"erl|hrl\"],\n    Forth: [\"frt|fs|ldr|fth|4th\"],\n    Fortran: [\"f|f90\"],\n    FTL: [\"ftl\"],\n    Gcode: [\"gcode\"],\n    Gherkin: [\"feature\"],\n    Gitignore: [\"^.gitignore\"],\n    Glsl: [\"glsl|frag|vert\"],\n    Gobstones: [\"gbs\"],\n    golang: [\"go\"],\n    GraphQLSchema: [\"gql\"],\n    Groovy: [\"groovy\"],\n    HAML: [\"haml\"],\n    Handlebars: [\"hbs|handlebars|tpl|mustache\"],\n    Haskell: [\"hs\"],\n    Haskell_Cabal: [\"cabal\"],\n    haXe: [\"hx\"],\n    Hjson: [\"hjson\"],\n    HTML: [\"html|htm|xhtml|vue|we|wpy\"],\n    HTML_Elixir: [\"eex|html.eex\"],\n    HTML_Ruby: [\"erb|rhtml|html.erb\"],\n    INI: [\"ini|conf|cfg|prefs\"],\n    Io: [\"io\"],\n    Jack: [\"jack\"],\n    Jade: [\"jade|pug\"],\n    Java: [\"java\"],\n    JavaScript: [\"js|jsm|jsx\"],\n    JSON: [\"json\"],\n    JSONiq: [\"jq\"],\n    JSP: [\"jsp\"],\n    JSSM: [\"jssm|jssm_state\"],\n    JSX: [\"jsx\"],\n    Julia: [\"jl\"],\n    Kotlin: [\"kt|kts\"],\n    LaTeX: [\"tex|latex|ltx|bib\"],\n    LESS: [\"less\"],\n    Liquid: [\"liquid\"],\n    Lisp: [\"lisp\"],\n    LiveScript: [\"ls\"],\n    LogiQL: [\"logic|lql\"],\n    LSL: [\"lsl\"],\n    Lua: [\"lua\"],\n    LuaPage: [\"lp\"],\n    Lucene: [\"lucene\"],\n    Makefile: [\"^Makefile|^GNUmakefile|^makefile|^OCamlMakefile|make\"],\n    Markdown: [\"md|markdown\"],\n    Mask: [\"mask\"],\n    MATLAB: [\"matlab\"],\n    Maze: [\"mz\"],\n    MEL: [\"mel\"],\n    MUSHCode: [\"mc|mush\"],\n    MySQL: [\"mysql\"],\n    Nix: [\"nix\"],\n    NSIS: [\"nsi|nsh\"],\n    ObjectiveC: [\"m|mm\"],\n    OCaml: [\"ml|mli\"],\n    Pascal: [\"pas|p\"],\n    Perl: [\"pl|pm\"],\n    pgSQL: [\"pgsql\"],\n    PHP: [\"php|phtml|shtml|php3|php4|php5|phps|phpt|aw|ctp|module\"],\n    Pig: [\"pig\"],\n    Powershell: [\"ps1\"],\n    Praat: [\"praat|praatscript|psc|proc\"],\n    Prolog: [\"plg|prolog\"],\n    Properties: [\"properties\"],\n    Protobuf: [\"proto\"],\n    Python: [\"py\"],\n    R: [\"r\"],\n    Razor: [\"cshtml|asp\"],\n    RDoc: [\"Rd\"],\n    Red: [\"red|reds\"],\n    RHTML: [\"Rhtml\"],\n    RST: [\"rst\"],\n    Ruby: [\"rb|ru|gemspec|rake|^Guardfile|^Rakefile|^Gemfile\"],\n    Rust: [\"rs\"],\n    SASS: [\"sass\"],\n    SCAD: [\"scad\"],\n    Scala: [\"scala\"],\n    Scheme: [\"scm|sm|rkt|oak|scheme\"],\n    SCSS: [\"scss\"],\n    SH: [\"sh|bash|^.bashrc\"],\n    SJS: [\"sjs\"],\n    Smarty: [\"smarty|tpl\"],\n    snippets: [\"snippets\"],\n    Soy_Template: [\"soy\"],\n    Space: [\"space\"],\n    SQL: [\"sql\"],\n    SQLServer: [\"sqlserver\"],\n    Stylus: [\"styl|stylus\"],\n    SVG: [\"svg\"],\n    Swift: [\"swift\"],\n    Tcl: [\"tcl\"],\n    Tex: [\"tex\"],\n    Text: [\"txt\"],\n    Textile: [\"textile\"],\n    Toml: [\"toml\"],\n    TSX: [\"tsx\"],\n    Twig: [\"twig|swig\"],\n    Typescript: [\"ts|typescript|str\"],\n    Vala: [\"vala\"],\n    VBScript: [\"vbs|vb\"],\n    Velocity: [\"vm\"],\n    Verilog: [\"v|vh|sv|svh\"],\n    VHDL: [\"vhd|vhdl\"],\n    Wollok: [\"wlk|wpgm|wtest\"],\n    XML: [\"xml|rdf|rss|wsdl|xslt|atom|mathml|mml|xul|xbl|xaml\"],\n    XQuery: [\"xq\"],\n    YAML: [\"yaml|yml\"],\n    Django: [\"html\"]\n  };\n  var nameOverrides = {\n    ObjectiveC: \"Objective-C\",\n    CSharp: \"C#\",\n    golang: \"Go\",\n    C_Cpp: \"C and C++\",\n    Csound_Document: \"Csound Document\",\n    Csound_Orchestra: \"Csound\",\n    Csound_Score: \"Csound Score\",\n    coffee: \"CoffeeScript\",\n    HTML_Ruby: \"HTML (Ruby)\",\n    HTML_Elixir: \"HTML (Elixir)\",\n    FTL: \"FreeMarker\"\n  };\n  var modesByName = {};\n\n  for (var name in supportedModes) {\n    var data = supportedModes[name];\n    var displayName = (nameOverrides[name] || name).replace(/_/g, \" \");\n    var filename = name.toLowerCase();\n    var mode = new Mode(filename, displayName, data[0]);\n    modesByName[filename] = mode;\n    modes.push(mode);\n  }\n\n  module.exports = {\n    getModeForPath: getModeForPath,\n    modes: modes,\n    modesByName: modesByName\n  };\n});\n\n(function () {\n  ace.acequire([\"ace/ext/modelist\"], function () {});\n})();","map":null,"metadata":{},"sourceType":"script"}